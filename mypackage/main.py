import numpy as np
from numpy.random import normal,poisson,binomial

class Gen:
      """"generator of random numbers values of a distribution given"
      args
      -----
      nameDist:(string) name of a distribution like Normal,Uniform,Binomial
      size: (integer) sample size
      par1, par2 : float parameters of each distribution given
      kwargs['par1']=par1, kwargs['par2']=par2
      Normal : mean, sigma(sigma >0)
      Poisson: lambda (float >=0)
      Binomial: n integer, p (n>0) , p-probability of success (0<=p<=1)
      Output:
      -------
      listgen: List of numbers generated by this function
      """
      def __init__(self,size,nameDist,**kwargs):
           self.size=size
           self.nameDist=nameDist
           self.par=[pp for pp in list(kwargs.values())]
                
      def check_par(self):
           try:
               assert isinstance(self.size,int) and self.size > 0
           except:
               print("size should be an int greater than 0")
           try:
               assert isinstance(self.nameDist,str) and self.nameDist!=""
           except:
               print("Name Distribution is wrong")
           listDist=['Normal','Poisson','Binomial']
           try:
               self.nid=listDist.index(self.nameDist)
           except:
               return print ( 'Error: Index of', self.nameDist,
                        'is out of range, Select an other Distribution' ) 
           if self.nameDist=='Normal':
               assert self.par[1]>0,"sigma should be greater than 0"
           if self.nameDist=='Poisson':
               assert self.par[0]>=0,"lambda should be greater or equal to 0"
           if self.nameDist=='Binomial':
               assert type(self.par[0])==int and self.par[0] >0,"n should be an int greater than 0 "
           if self.nameDist=='Binomial':
               assert self.par[1]>=0 and self.par[1]<=1,"p is a sucess probability should be in [0,1]"
                
      def sample(self):
          self.check_par()
          if self.nid==0:
                return normal(self.par[0],self.par[1],self.size)
          elif self.nid==1:
                 return poisson(self.par[0],self.size)
          elif self.nid==2:
                return binomial(self.par[0],self.par[1],self.size)
          else:
                pass
